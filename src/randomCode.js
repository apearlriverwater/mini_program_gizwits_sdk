"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MD5 = require("./md5");
const aesjs = require("./aes");
const getRandomCodes = ({ SSID, password, pks }) => {
    const randomCodes = [];
    pks.map(item => {
        const code = getRandomCode({
            SSID,
            password,
            pk: item
        });
        randomCodes.push(code);
    });
    return randomCodes;
};
const pcks7padding = (key) => {
    return key;
};
const getRandomCode = ({ SSID, password, pk }) => {
    const md5str = MD5.hex(SSID + password);
    let key = [];
    for (let i = 0; i < md5str.length; i = i + 2) {
        key.push(parseInt(md5str[i] + md5str[i + 1], 16));
    }
    key = pcks7padding(key);
    const text = pk;
    const textBytes = aesjs.utils.utf8.toBytes(text);
    const aesEcb = new aesjs.ModeOfOperation.ecb(key);
    const encryptedBytes = aesEcb.encrypt(textBytes);
    const md5Str = MD5.hex(encryptedBytes);
    return md5Str;
};
exports.default = getRandomCodes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tQ29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJhbmRvbUNvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw2QkFBOEI7QUFDOUIsK0JBQWdDO0FBZWhDLE1BQU0sY0FBYyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBbUIsRUFBWSxFQUFFO0lBQzVFLE1BQU0sV0FBVyxHQUFhLEVBQUUsQ0FBQztJQUNqQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2IsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDO1lBQ3pCLElBQUk7WUFDSixRQUFRO1lBQ1IsRUFBRSxFQUFFLElBQUk7U0FDVCxDQUFDLENBQUM7UUFDSCxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUMzQixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQTtBQUVELE1BQU0sYUFBYSxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBa0IsRUFBVSxFQUFFO0lBQ3ZFLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDO0lBQ3hDLElBQUksR0FBRyxHQUFhLEVBQUUsQ0FBQztJQUN2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ25EO0lBQ0QsR0FBRyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUM7SUFDaEIsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pELE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEQsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqRCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZDLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQTtBQUtELGtCQUFlLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IE1ENSA9IHJlcXVpcmUoJy4vbWQ1Jyk7XG5pbXBvcnQgYWVzanMgPSByZXF1aXJlKCcuL2FlcycpO1xuXG5cbmludGVyZmFjZSBJR2V0UmFuZG9tQ29kZXMge1xuICBTU0lEOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG4gIHBrczogc3RyaW5nW107XG59XG5cbmludGVyZmFjZSBJR2V0UmFuZG9tQ29kZSB7XG4gIFNTSUQ6IHN0cmluZztcbiAgcGFzc3dvcmQ6IHN0cmluZztcbiAgcGs6IHN0cmluZztcbn1cblxuY29uc3QgZ2V0UmFuZG9tQ29kZXMgPSAoeyBTU0lELCBwYXNzd29yZCwgcGtzIH06IElHZXRSYW5kb21Db2Rlcyk6IHN0cmluZ1tdID0+IHtcbiAgY29uc3QgcmFuZG9tQ29kZXM6IHN0cmluZ1tdID0gW107XG4gIHBrcy5tYXAoaXRlbSA9PiB7XG4gICAgY29uc3QgY29kZSA9IGdldFJhbmRvbUNvZGUoe1xuICAgICAgU1NJRCxcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgcGs6IGl0ZW1cbiAgICB9KTtcbiAgICByYW5kb21Db2Rlcy5wdXNoKGNvZGUpO1xuICB9KVxuICByZXR1cm4gcmFuZG9tQ29kZXM7XG59XG5cbmNvbnN0IHBja3M3cGFkZGluZyA9IChrZXkpID0+IHtcbiAgcmV0dXJuIGtleTtcbn1cblxuY29uc3QgZ2V0UmFuZG9tQ29kZSA9ICh7IFNTSUQsIHBhc3N3b3JkLCBwayB9OiBJR2V0UmFuZG9tQ29kZSk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IG1kNXN0ciA9IE1ENS5oZXgoU1NJRCArIHBhc3N3b3JkKTtcbiAgbGV0IGtleTogbnVtYmVyW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZDVzdHIubGVuZ3RoOyBpID0gaSArIDIpIHtcbiAgICBrZXkucHVzaChwYXJzZUludChtZDVzdHJbaV0gKyBtZDVzdHJbaSArIDFdLCAxNikpO1xuICB9XG4gIGtleSA9IHBja3M3cGFkZGluZyhrZXkpO1xuICBjb25zdCB0ZXh0ID0gcGs7XG4gIGNvbnN0IHRleHRCeXRlcyA9IGFlc2pzLnV0aWxzLnV0ZjgudG9CeXRlcyh0ZXh0KTtcbiAgY29uc3QgYWVzRWNiID0gbmV3IGFlc2pzLk1vZGVPZk9wZXJhdGlvbi5lY2Ioa2V5KTtcbiAgY29uc3QgZW5jcnlwdGVkQnl0ZXMgPSBhZXNFY2IuZW5jcnlwdCh0ZXh0Qnl0ZXMpO1xuICBjb25zdCBtZDVTdHIgPSBNRDUuaGV4KGVuY3J5cHRlZEJ5dGVzKTtcbiAgcmV0dXJuIG1kNVN0cjtcbn1cblxuLy8gY29uc29sZS5sb2coZ2V0UmFuZG9tQ29kZXMoeyBTU0lEOiAnZ2l6d2l0cycsIHBhc3N3b3JkOiAnZ2l6JDIwMjUnLCBwa3M6IFsnMTYyODY2YTUzMzZjNGE5MmE3ZWRiYTFhMmIwN2IxODInXSB9KSk7XG5cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmFuZG9tQ29kZXM7Il19